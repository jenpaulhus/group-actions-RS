/* LAST UPDATED:  Jan 05, 2020 */
/* TO DO:  more efficient algorithms
	   abelian case speed up?
	   is it ok that I only use OUTER
	   write up mathematics  */


/* CALL FUNCTION FindOrbits(G,signature,data,g0);
DATA is a set of records RecFormat:=recformat<gen_vectors,cc, genvec_id,brd_id, top_i>;  */



load "orbit_helper_fns";


FindOrbits:=procedure(G,signature,data,g0,label,g);

if g0 eq 0 then 
   filenm:="genus" cat IntegerToString(g);
   errorfile:="ERRORS" cat IntegerToString(g);
   
   genvecs:=[data[i]`gen_vectors : i in [1..#data]];

   /* ABELIAN?? */

   if #genvecs gt 0 then
      if #genvecs eq 1 then
         PrintFile(filenm, "# " cat label);
      	 PrintOne(data[1]`genvec_id, data[1]`genvec_id, data[1]`genvec_id, filenm,label);
     
      else
	 B:=AutomorphismGroup(G); 
	 f,A,k:=PermutationRepresentation(B);
	 h:=Inverse(f); /* Map from A to B */
	 aut:= [h(aL): aL in A | not IsInner(h(aL))];   /* Outer Automorphisms */
	 /* aut:= [h(aL): aL in A ]; */
      
 	 Vects:={g : g in genvecs};


	 /* CHECK IF BRAIDS ALL DISTINCT */
	 flag:=0;
	 for i in [1..#data] do
    	    if data[i]`cc[2] gt 1 then
       	       flag:=1;
    	    end if;
	 end for;
	 if flag eq 1 then
      	    BrdRep,BrdOrbs:=OrbitComputeBraid(Vects,#signature-1);
	 else
	    BrdRep:=Vects;
	    BrdOrbs:=[{vec} : vec in Vects];
	 end if;
	 
	 TopRep,TopOrbs:=OrbitComputeAut(Vects,aut,#signature-1);


	 /* Assign Braid IDs */
	 for i in [1..#BrdOrbs] do
   	    OrbList:=[ ];  /* contains lists of pairs and ids */
   	    uploadList:=[];
   	    for genvec in BrdOrbs[i] do
       	       for k in [1..#data] do
                  if genvec eq data[k]`gen_vectors then
	      	     Append(~OrbList,[*data[k]`cc, data[k]`genvec_id*]);
	      	     Append(~uploadList,k);
	      	     break;
	   	  end if;    
	       end for;   	   
   	    end for;
   	    m:=Min({orb[1]: orb in OrbList});
	    minIDList:={data[k]`genvec_id : k in [1..#data] | data[k]`cc eq m};

   	    if #minIDList gt 1 then
      	       PrintFile(errorfile,"AN ERROR FOR MESSED UP BRAID DATA");
   	    else
      	       minID:=[s : s in minIDList][1];   
	    end if;
	    for uL in uploadList do
       	       data[uL]`brd_id:=minID;
   	    end for;    
	 end for;

	 /* Assign Top IDs */
	 for i in [1..#TopOrbs] do
   	    OrbList:=[ ];  /* contains lists of pairs and ids */
   	    uploadList:=[];
   	    for genvec in TopOrbs[i] do
       	       for k in [1..#data] do
                  if genvec eq data[k]`gen_vectors then
	      	     Append(~OrbList,[*data[k]`cc, data[k]`genvec_id*]);
	      	     Append(~uploadList,k);
	      	     break;
	   	  end if;    
	       end for;   	   
   	    end for;
   	    m:=Min({orb[1]: orb in OrbList});
	    minIDList:={data[k]`genvec_id : k in [1..#data] | data[k]`cc eq m};
	    
	    if #minIDList gt 1 then
      	       PrintFile(errorfile,"AN ERROR FOR MESSED UP TOP DATA");
   	    else
      	       minID:=[s : s in minIDList][1];   
	    end if;
	    for uL in uploadList do
       	    	data[uL]`top_id:=minID;
   	    end for;    
	 end for;
	 PrintReps(data,filenm,label); 

      end if;  /* whether only one gen vec or not */ 
   
   else
	PrintFile(errorfile,"AN ERROR FOR THIS GENERATING SET HAS NO GEN VECTORS");
   end if;

/* else skip if  g0 >0 */

end if;  


end procedure;






