/* helper functions for orbits */


Qi:=function(k,L);
   left_unchanged:=[L[i] : i in [1..k-1]];
   braid:=[L[k]*L[k+1]*L[k]^-1,L[k]];
   right_unchanged:=[L[i]: i in [k+2..#L] ];
   return left_unchanged cat braid cat right_unchanged;
end function;

BrdOrbit:=function(L,r);
   for ell in L do
      for i in [1..r-1] do
         brd:=Qi(i,ell);
         L join:={brd};
      end for;   
   end for;
   return L;
end function;

Strg:=function(L);
   sg:="[";
   for i in [1..#L-1] do
     sg:= sg cat IntegerToString(L[i]) cat ",";
   end for;
   sg:= sg cat IntegerToString(L[#L]) cat "]";
   return sg;
end function;


OuterAutOrbit:=function(L,G);
   for ell in L do
     for g in G do
        L join:={g(ell)};
     end for;
   end for;
   return L;
end function;


OrbitComputeBraid:=function(Vects,r);
   T:={};
   Orbs:=[];

   genvecs:=Vects;   /* Does this make a brand new copy--YES */
   while Vects ne {} do
      rand:=Random(Vects);
      T join:={rand};
      
      tempcount:=0;
      Orb:={rand};
      /* t1:=Cputime(); */
      while (tempcount eq 0) do
         sizeOrb:=#Orb;
         Orb:=BrdOrbit(Orb,r); 
         if #Orb eq sizeOrb  then
            tempcount:=1;  /* stops when outer aut doesn't add more */
            N:=genvecs meet Orb;
            Append(~Orbs,N);
         else
            Vects diff:=Orb;
            if #Vects eq 0 then
               N:=genvecs meet Orb;
               Append(~Orbs,N);
               tempcount:=1;/* stop if all in one orbit or got to last */
            end if;
         end if;    
      end while;   /* tempcount:=0 */ 
   end while;  /* while Vects not empty */
   return T, Orbs;
end function;



OrbitComputeAut:=function(Vects,A,r);

   /* T will be list of final orbits, A is outer auts */
   T:={};
   Orbs:=[];

   genvecs:=Vects;   /* Does this make a brand new copy--YES */
   while Vects ne {} do
      rand:=Random(Vects);
      T join:={rand};

      tempcount:=0;
      Orb:={rand};
      /* t1:=Cputime(); */
      while (tempcount eq 0) do
         sizeOrb:=#Orb;
         Orb:=OuterAutOrbit(Orb,A);
         Orb:=BrdOrbit(Orb,r);
         if #Orb eq sizeOrb  then
            tempcount:=1;  /* stops when outer aut doesn't add more */
            N:=genvecs meet Orb;
            Append(~Orbs,N);
         else
            Vects diff:=Orb;
            if #Vects eq 0 then
                N:=genvecs meet Orb;
                Append(~Orbs,N);
               tempcount:=1;/* stop if all in one orbit or got to last */
            end if;
         end if;    
      end while;   /* tempcount:=0 */ 
   end while;  /* while Vects not empty */
   return T, Orbs;
end function;






/* If there is one generating vector in the family
    dataz is one record ONLY! */
PrintOne:=procedure(id, brd_id, top_id, filenm,label)
   PrintFile(filenm,IntegerToString(id) cat ":");
   PrintFile(filenm,"   topological: " cat IntegerToString(top_id));
   PrintFile(filenm,"   braid: " cat IntegerToString(brd_id));
end procedure;






/* If there are more than one generating vectors in the family */
PrintReps:=procedure(data,filenm,label)
   PrintFile(filenm, "# " cat label);
   for dataz in data do
      PrintOne(dataz`genvec_id,dataz`brd_id,dataz`top_id,filenm,label);
    end for;
end procedure;    



/* genvec_id,brd_id, top_id */



